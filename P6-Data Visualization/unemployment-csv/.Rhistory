install.packages('knitr')
getwd()
#   The desired alpha for a two-tailed test
# Returns: The z-critical value
get_z_star = function(alpha) {
return(-qnorm(alpha / 2))
}
# Inputs:
#   z-star: The z-critical value
#   s: The variance of the metric at N=1
#   d_min: The practical significance level
#   N: The sample size of each group of the experiment
# Returns: The beta value of the two-tailed test
get_beta = function(z_star, s, d_min, N) {
SE = s /  sqrt(N)
return(pnorm(z_star * SE, mean=d_min, sd=SE))
}
# Inputs:
#   s: The variance of the metric with N=1 in each group
#   d_min: The practical significance level
#   Ns: The sample sizes to try
#   alpha: The desired alpha level of the test
#   beta: The desired beta level of the test
# Returns: The smallest N out of the given Ns that will achieve the desired
#          beta. There should be at least N samples in each group of the experiment.
#          If none of the given Ns will work, returns -1. N is the number of
#          samples in each group.
required_size = function(s, d_min, Ns=1:20000, alpha=0.05, beta=0.2) {
for (N in Ns) {
if (get_beta(get_z_star(alpha), s, d_min, N) <= beta) {
return(N)
}
}
return(-1)
}
# Example analytic usage
# This is the example from Lesson 1, for which the online calculate gave 3,623
# samples in each group
# s is the pooled standard error for N=1 in each group,
# which is sqrt(p*(1-p)*(1/1 + 1/1))
required_size(s=sqrt(0.1*0.9*2), d_min=0.02)
required_size(s=0.0202, d_min=0.01)
required_size(s=0.0202, d_min=0.01)
required_size(s=0.0549, d_min=0.01)
required_size(s=0.0156, d_min=0.01)
required_size(s=0.0202, d_min=0.01)
required_size(s=0.0549, d_min=0.01)
required_size(s=0.0156, d_min=0.0075)
total <- 237+33+34
required_size(s=0.0202, d_min=0.01)
required_size(s=0.0549, d_min=0.01)
required_size(s=0.0156, d_min=0.0075)
required_size(s=0.00202, d_min=0.01)
required_size(s=0.00549, d_min=0.01)
required_size(s=0.00156, d_min=0.0075)
required_size(s=0.0202, d_min=0.01)
required_size(s=0.0549, d_min=0.01)
required_size(s=0.0156, d_min=0.0075)
setwd("~/Desktop/AI/Udacity/d3-project/unemployment-csv")
library(reshape2)
full.df <- NULL
for (file in list.files()) {
df <- read.csv(file, header=TRUE, sep= ";")
print(file)
#fix column headers
names(df) <- gsub(names(df), pattern="X", replacement="")
names(df)[1] <- "Country"
#melt
df <- melt(df, id="Country", variable.name="Year", value.name="Unemployment Rate")
#get age and gender
gender <- substr(file, 11, 11)
age <- substr(file, 13, 13)
if (age == 'a') {
full.age <- 'above 55'
} else if (age == 'b') {
full.age <- 'All (above 15)'
} else if (age == '1') {
full.age <- '15-24'
} else if (age == '2') {
full.age <- '25-54'
}
df['Gender'] <- gender
df['Age'] <- full.age
#merge to existing. create if frist
if (is.null(full.df)) full.df <- df
full.df <- rbind(full.df, df)
tail(full.df)
}
#remove lines with NULL value in country
full.df <- subset(full.df, Country != '')
gdp.df <- read.csv("../gdp-xls-csv/GDPpercapitaconstant2000US.csv", header=TRUE, sep=";")
#fix column headers
names(gdp.df) <- gsub(names(gdp.df), pattern="X", replacement="")
names(gdp.df)[1] <- "Country"
#melt
gdp.df <- melt(gdp.df, id="Country", variable.name="Year", value.name="Per Capita GDP")
#merge with full df
total.df <- merge(full.df, gdp.df, by=c("Country", "Year"))
opulation
#load file from
population.df <- read.csv("../population-xls-csv/indicator gapminder population.xlsx - Data.csv", header=TRUE, sep=";")
#fix column headers
names(population.df) <- gsub(names(population.df), pattern="X", replacement="")
names(population.df)[1] <- "Country"
#melt
population.df <- melt(population.df, id="Country", variable.name="Year", value.name="Per Capita GDP")
#merge with full df
total.df <- merge(full.df, population.df, by=c("Country", "Year"))
#save file
write.csv(total.df, file=('../consolidated_unemployment_gdp.csv'), sep=';', row.names=FALSE)
library(reshape2)
#run from unemployment-csv-folder
full.df <- NULL
for (file in list.files()) {
df <- read.csv(file, header=TRUE, sep= ";")
print(file)
#fix column headers
names(df) <- gsub(names(df), pattern="X", replacement="")
names(df)[1] <- "Country"
#melt
df <- melt(df, id="Country", variable.name="Year", value.name="Unemployment Rate")
#get age and gender
gender <- substr(file, 11, 11)
age <- substr(file, 13, 13)
if (age == 'a') {
full.age <- 'above 55'
} else if (age == 'b') {
full.age <- 'All (above 15)'
} else if (age == '1') {
full.age <- '15-24'
} else if (age == '2') {
full.age <- '25-54'
}
df['Gender'] <- gender
df['Age'] <- full.age
#merge to existing. create if frist
if (is.null(full.df)) full.df <- df
full.df <- rbind(full.df, df)
tail(full.df)
}
#remove lines with NULL value in country
full.df <- subset(full.df, Country != '')
#fix commas
#full.df['Unemployment Rate'] <- gsub(full.df['Unemployment Rate'], pattern=",", replacement=".")
#save file
#write.csv(full.df, file=('consolidated_unemployment.csv'), sep=';', row.names=FALSE)
#gdp should be melted in a similar format and merged with above results, since dimple will only take one dataset
#load file from
gdp.df <- read.csv("../gdp-xls-csv/GDPpercapitaconstant2000US.csv", header=TRUE, sep=";")
#fix column headers
names(gdp.df) <- gsub(names(gdp.df), pattern="X", replacement="")
names(gdp.df)[1] <- "Country"
#melt
gdp.df <- melt(gdp.df, id="Country", variable.name="Year", value.name="Per Capita GDP")
#merge with full df
total.df <- merge(full.df, gdp.df, by=c("Country", "Year"))
#load file from
population.df <- read.csv("../population-xls-csv/indicator gapminder population.xlsx - Data.csv", header=TRUE, sep=";")
#fix column headers
names(population.df) <- gsub(names(population.df), pattern="X", replacement="")
names(population.df)[1] <- "Country"
#melt
population.df <- melt(population.df, id="Country", variable.name="Year", value.name="Per Capita GDP")
#merge with full df
total.df <- merge(total.df, population.df, by=c("Country", "Year"))
#save file
write.csv(total.df, file=('../consolidated_unemployment_gdp.csv'), sep=';', row.names=FALSE)
library(reshape2)
#run from unemployment-csv-folder
full.df <- NULL
for (file in list.files()) {
df <- read.csv(file, header=TRUE, sep= ";")
print(file)
#fix column headers
names(df) <- gsub(names(df), pattern="X", replacement="")
names(df)[1] <- "Country"
#melt
df <- melt(df, id="Country", variable.name="Year", value.name="Unemployment Rate")
#get age and gender
gender <- substr(file, 11, 11)
age <- substr(file, 13, 13)
if (age == 'a') {
full.age <- 'above 55'
} else if (age == 'b') {
full.age <- 'All (above 15)'
} else if (age == '1') {
full.age <- '15-24'
} else if (age == '2') {
full.age <- '25-54'
}
df['Gender'] <- gender
df['Age'] <- full.age
#merge to existing. create if frist
if (is.null(full.df)) full.df <- df
full.df <- rbind(full.df, df)
tail(full.df)
}
#remove lines with NULL value in country
full.df <- subset(full.df, Country != '')
#fix commas
#full.df['Unemployment Rate'] <- gsub(full.df['Unemployment Rate'], pattern=",", replacement=".")
#save file
#write.csv(full.df, file=('consolidated_unemployment.csv'), sep=';', row.names=FALSE)
############ fix and add gdp
#gdp should be melted in a similar format and merged with above results, since dimple will only take one dataset
#load file from
gdp.df <- read.csv("../gdp-xls-csv/GDPpercapitaconstant2000US.csv", header=TRUE, sep=";")
#fix column headers
names(gdp.df) <- gsub(names(gdp.df), pattern="X", replacement="")
names(gdp.df)[1] <- "Country"
#melt
gdp.df <- melt(gdp.df, id="Country", variable.name="Year", value.name="Per Capita GDP")
#merge with full df
total.df <- merge(full.df, gdp.df, by=c("Country", "Year"))
############ fix and add population
#load file from
population.df <- read.csv("../population-xls-csv/indicator gapminder population.xlsx - Data.csv", header=TRUE, sep=";")
#fix column headers
names(population.df) <- gsub(names(population.df), pattern="X", replacement="")
names(population.df)[1] <- "Country"
#melt
population.df <- melt(population.df, id="Country", variable.name="Year", value.name="Population")
#merge with full df
total.df <- merge(total.df, population.df, by=c("Country", "Year"))
#save file
write.csv(total.df, file=('../consolidated_unemployment_gdp.csv'), sep=';', row.names=FALSE)
View(population.df)
population.df <- read.csv("../population-xls-csv/indicator gapminder population.xlsx - Data.csv", header=TRUE, sep=",")
names(population.df) <- gsub(names(population.df), pattern="X", replacement="")
names(population.df)[1] <- "Country"
population.df <- melt(population.df, id="Country", variable.name="Year", value.name="Population")
View(population.df)
#run from unemployment-csv-folder
full.df <- NULL
for (file in list.files()) {
df <- read.csv(file, header=TRUE, sep= ";")
print(file)
#fix column headers
names(df) <- gsub(names(df), pattern="X", replacement="")
names(df)[1] <- "Country"
#melt
df <- melt(df, id="Country", variable.name="Year", value.name="Unemployment Rate")
#get age and gender
gender <- substr(file, 11, 11)
age <- substr(file, 13, 13)
if (age == 'a') {
full.age <- 'above 55'
} else if (age == 'b') {
full.age <- 'All (above 15)'
} else if (age == '1') {
full.age <- '15-24'
} else if (age == '2') {
full.age <- '25-54'
}
df['Gender'] <- gender
df['Age'] <- full.age
#merge to existing. create if frist
if (is.null(full.df)) full.df <- df
full.df <- rbind(full.df, df)
tail(full.df)
}
#remove lines with NULL value in country
full.df <- subset(full.df, Country != '')
#fix commas
#full.df['Unemployment Rate'] <- gsub(full.df['Unemployment Rate'], pattern=",", replacement=".")
#save file
#write.csv(full.df, file=('consolidated_unemployment.csv'), sep=';', row.names=FALSE)
############ fix and add gdp
#gdp should be melted in a similar format and merged with above results, since dimple will only take one dataset
#load file from
gdp.df <- read.csv("../gdp-xls-csv/GDPpercapitaconstant2000US.csv", header=TRUE, sep=";")
#fix column headers
names(gdp.df) <- gsub(names(gdp.df), pattern="X", replacement="")
names(gdp.df)[1] <- "Country"
#melt
gdp.df <- melt(gdp.df, id="Country", variable.name="Year", value.name="Per Capita GDP")
#merge with full df
total.df <- merge(full.df, gdp.df, by=c("Country", "Year"))
############ fix and add population
#load file from
population.df <- read.csv("../population-xls-csv/indicator gapminder population.xlsx - Data.csv", header=TRUE, sep=",")
#fix column headers
names(population.df) <- gsub(names(population.df), pattern="X", replacement="")
names(population.df)[1] <- "Country"
#melt
population.df <- melt(population.df, id="Country", variable.name="Year", value.name="Population")
#merge with full df
total.df <- merge(total.df, population.df, by=c("Country", "Year"))
#save file
write.csv(total.df, file=('../consolidated_unemployment_gdp.csv'), sep=';', row.names=FALSE)
total.df$weighted_rate <- total.df$`Unemployment Rate` * total.df$Population
str(total.df)
